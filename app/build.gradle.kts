import org.jlleitschuh.gradle.ktlint.reporter.ReporterType


/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)

    // Apply the org.jetbrains.kotlin.plugin.serialization Plugin to add support for Kotlin Serialization.
    alias(libs.plugins.kotlinx.plugin.serialization)

    id("org.jlleitschuh.gradle.ktlint") version "11.6.1"

    // Apply the application plugin to add support for building a CLI application in Java.
    application

    id("com.gradleup.shadow") version "8.3.3"
    id("jacoco")
    id("com.github.nbaztec.coveralls-jacoco") version "1.2.20"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven { url = uri("https://jitpack.io") }
}

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)
    implementation(libs.telegram)
    implementation(libs.coroutines.core)
    implementation(libs.kotlinx.json.serialization)
    implementation(libs.kotlinx.datetime)
    implementation(libs.kotlin.dotenv)
    implementation(platform(libs.okhttp.bom))
    implementation(libs.okhttp)
    implementation(libs.okhttp.logging)
    implementation(libs.postgresql)
    implementation(libs.hikkari)
    implementation(libs.exposed.core)
    implementation(libs.exposed.dao)
    implementation(libs.exposed.jdbc)
    implementation(libs.exposed.java.time)

    testImplementation(libs.mockk)
    testImplementation(libs.kotlin.test.junit)
    testImplementation(libs.coroutines.test)
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use JUnit Jupiter test framework
            useJUnitJupiter("5.11.3")
        }
    }
}

ktlint {
    version.set("1.6.0")
    verbose.set(true)
    outputToConsole.set(true)
    coloredOutput.set(true)
    reporters {
        reporter(ReporterType.PLAIN)
        reporter(ReporterType.HTML)
    }
    filter {
        exclude("**/build/**")
    }
}

jacoco {
    toolVersion = "0.8.11"
}

tasks.test {
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

coverallsJacoco {
    reportPath = "app/build/reports/jacoco/test/jacocoTestReport.xml"
}

tasks {
    // Дополнительная задача для проверки (аналог `ktlintCheck`)
    register("ktlintCheckAll") {
        dependsOn("ktlintCheck")
        description = "Check Kotlin code style for all sources."
    }

    // Дополнительная задача для форматирования
    register("ktlintFormatAll") {
        dependsOn("ktlintFormat")
        description = "Fix Kotlin code style deviations for all sources."
    }

    // Добавляем проверку в стандартный таск `check`
    named("check") {
        dependsOn("ktlintCheckAll")
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "io.github.vprud.AppKt"
}
